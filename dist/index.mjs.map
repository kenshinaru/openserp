{"version":3,"sources":["../src/utils/logger.ts","../src/providers/google.ts","../src/providers/baidu.ts","../src/providers/yandex.ts","../src/services/searchService.ts","../src/routers/baiduRouter.ts","../src/routers/yandexRouter.ts","../src/routers/googleRouter.ts","../src/routers/screenshotRouter.ts","../src/index.ts"],"sourcesContent":["/**\n * @file logger.ts\n * @description Configures Winston logger for the application.\n */\n\nimport { createLogger, format, transports } from 'winston';\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.combine(\n    format.colorize(),\n    format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    format.printf(info => `[${info.timestamp}] ${info.level}: ${info.message}`)\n  ),\n  transports: [new transports.Console()],\n});\n\nexport default logger; ","/**\n * @file google.ts\n * @description Performs Google searches using Playwright with rate limiting.\n */\n\nimport { Browser, Page, BrowserContext } from 'playwright';\n\n/**\n * Represents a search query.\n */\nexport interface Query {\n  text: string;\n  site?: string;\n  filetype?: string;\n  dateInterval?: string;\n  langCode?: string;\n  limit?: number;\n}\n\n/**\n * Represents a search result.\n */\nexport interface SearchResult {\n  rank: number;\n  url: string;\n  title: string;\n  description: string;\n}\n\n/**\n * Maps language codes to their respective Google domains.\n */\nconst GoogleDomains: Record<string, string> = {\n  \"\": \"com\",\n  \"en\": \"com\",\n  \"es\": \"com\",\n  // ... (Include all necessary mappings)\n};\n\n/**\n * Builds a Google search URL based on the provided query.\n * @param {Query} query - The search query parameters.\n * @returns {string} - The constructed Google search URL.\n */\nfunction buildSearchURL(query: Query): string {\n  const domain = GoogleDomains[query.langCode?.toLowerCase() || \"\"] || \"com\";\n  const baseURL = `https://www.google.${domain}/search`;\n  const params = new URLSearchParams();\n\n  if (query.text || query.site || query.filetype) {\n    let searchText = query.text;\n    if (query.site) searchText += ` site:${query.site}`;\n    if (query.filetype) searchText += ` filetype:${query.filetype}`;\n    params.append('q', searchText);\n    params.append('oq', searchText);\n  }\n\n  if (query.dateInterval) {\n    const [start, end] = query.dateInterval.split('..');\n    params.append('tbs', `cdr:1,cd_min:${start},cd_max:${end}`);\n  }\n\n  if (query.limit) {\n    params.append('num', query.limit.toString());\n  }\n\n  if (query.langCode) {\n    params.append('hl', query.langCode);\n    params.append('lr', `lang_${query.langCode.toLowerCase()}`);\n  }\n\n  params.append('pws', '0'); // Disable personalized search\n  params.append('nfpr', '1'); // Disable auto correction\n\n  const url = new URL(baseURL);\n  url.search = params.toString();\n  return url.toString();\n}\n\n/**\n * Parses search results from the Google results page.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<SearchResult[]>} - The parsed search results.\n */\nasync function parseSearchResults(page: Page): Promise<SearchResult[]> {\n  const results: SearchResult[] = [];\n  const resultElements = await page.$$('div#search div.g');\n\n  for (let i = 0; i < resultElements.length; i++) {\n    const element = resultElements[i];\n    try {\n      const title = await element.$eval('h3', el => el.textContent?.trim() || 'No title');\n      const url = await element.$eval('a', el => el.getAttribute('href') || 'No URL');\n      const description = await element.$eval('.VwiC3b', el => el.textContent?.trim() || 'No description');\n\n      if (url && url !== '#') {\n        results.push({\n          rank: i + 1,\n          url,\n          title,\n          description,\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to parse a search result: ${(error as Error).message}`);\n      continue;\n    }\n  }\n\n  console.info(`Parsed ${results.length} search results.`);\n  return results;\n}\n\n/**\n * Detects and handles Google captchas.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<boolean>} - Whether a captcha was detected.\n */\nasync function handleCaptcha(page: Page): Promise<boolean> {\n  try {\n    const captchaFrame = await page.frame({ url: /https:\\/\\/www\\.google\\.com\\/recaptcha\\/api2\\/anchor\\?k=/ });\n    if (captchaFrame) {\n      console.error('Captcha detected on Google search page.');\n      // Implement captcha solving logic or notify the user\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.warn('Error while checking for captcha.');\n    return false;\n  }\n}\n\n/**\n * Accepts cookie consent if prompted.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<void>}\n */\nasync function acceptCookieConsent(page: Page): Promise<void> {\n  try {\n    const consentButton = await page.$('button[aria-label=\"Accept all\"]');\n    if (consentButton) {\n      await consentButton.click();\n      console.info('Accepted cookie consent.');\n    }\n  } catch (error) {\n    console.warn('No cookie consent dialog found.');\n  }\n}\n\n/**\n * Performs a Google search with rate limiting.\n * @param {Browser} browser - The Playwright browser instance.\n * @param {string} query - The search query.\n * @param {boolean} acceptCookies - Whether to accept cookies.\n * @returns {Promise<SearchResult[]>} - The search results.\n */\nexport async function performGoogleSearch(\n  browser: BrowserContext,\n  query: string,\n  acceptCookies: boolean = true\n): Promise<SearchResult[]> {\n  const page: Page = await browser.newPage();\n  \n  try {\n    const searchURL = buildSearchURL({ text: query, limit: 10, langCode: 'en' });\n    await page.goto(searchURL, { waitUntil: 'networkidle' });\n\n    if (acceptCookies) {\n      await acceptCookieConsent(page);\n    }\n\n    const isCaptcha = await handleCaptcha(page);\n    if (isCaptcha) {\n      console.error('Captcha detected during Google search.');\n      throw new Error('Captcha encountered');\n    }\n\n    const results = await parseSearchResults(page);\n    return results;\n  } catch (error) {\n    console.error(`Error during Google search: ${(error as Error).message}`);\n    throw error;\n  } finally {\n    await page.close();\n  }\n}\n","/**\n * @file baidu.ts\n * @description Performs Baidu searches using Playwright with rate limiting.\n */\n\nimport { BrowserContext, Page } from 'playwright';\n\n/**\n * Represents a search query.\n */\nexport interface Query {\n  text: string;\n  site?: string;\n  filetype?: string;\n  dateInterval?: string;\n  langCode?: string;\n  limit?: number;\n}\n\n/**\n * Represents a search result.\n */\nexport interface SearchResult {\n  rank: number;\n  url: string;\n  title: string;\n  description: string;\n}\n\n/**\n * Builds a Baidu search URL based on the provided query.\n * @param {Query} query - The search query parameters.\n * @returns {string} - The constructed Baidu search URL.\n */\nfunction buildBaiduSearchURL(query: Query): string {\n  const baseURL = 'https://www.baidu.com/s';\n  const params = new URLSearchParams();\n\n  if (query.text || query.site || query.filetype) {\n    let searchText = query.text;\n    if (query.site) searchText += ` site:${query.site}`;\n    if (query.filetype) searchText += ` filetype:${query.filetype}`;\n    params.append('wd', searchText);\n  }\n\n  if (query.dateInterval) {\n    const [start, end] = query.dateInterval.split('..');\n    const ts1 = new Date(start).getTime() / 1000;\n    const ts2 = new Date(end).getTime() / 1000;\n    params.append('gpc', `stf=${ts1},${ts2}|stftype=2`);\n  }\n\n  if (query.limit) {\n    params.append('rn', query.limit.toString());\n  }\n\n  params.append('f', '8');\n  params.append('ie', 'utf-8');\n\n  const url = new URL(baseURL);\n  url.search = params.toString();\n  return url.toString();\n}\n\n/**\n * Parses search results from the Baidu results page.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<SearchResult[]>} - The parsed search results.\n */\nasync function parseBaiduSearchResults(page: Page): Promise<SearchResult[]> {\n  const results: SearchResult[] = [];\n  const resultElements = await page.$$('div.c-container.new-pmd');\n\n  for (let i = 0; i < resultElements.length; i++) {\n    const element = resultElements[i];\n    try {\n      const title = await element.$eval('a', el => el.textContent?.trim() || 'No title');\n      const url = await element.$eval('a', el => el.getAttribute('href') || 'No URL');\n      const description = await element.$eval('.c-abstract', el => el.textContent?.trim() || 'No description');\n\n      if (url && url !== '#') {\n        results.push({\n          rank: i + 1,\n          url,\n          title,\n          description,\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to parse a search result: ${(error as Error).message}`);\n      continue;\n    }\n  }\n\n  console.info(`Parsed ${results.length} search results.`);\n  return results;\n}\n\n/**\n * Detects and handles Baidu captchas.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<boolean>} - Whether a captcha was detected.\n */\nasync function handleCaptcha(page: Page): Promise<boolean> {\n  try {\n    const captchaDialog = await page.$('div.passMod_dialog-body');\n    if (captchaDialog) {\n      console.error('Captcha detected on Baidu search page.');\n      // Implement captcha solving logic or notify the user\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.warn('Error while checking for captcha.');\n    return false;\n  }\n}\n\n/**\n * Performs a Baidu search.\n * @param {Browser} browser - The Playwright browser instance.\n * @param {Query} query - The search query parameters.\n * @returns {Promise<SearchResult[]>} - The search results.\n */\nexport async function performBaiduSearch(\n  browser: BrowserContext,\n  query: Query\n): Promise<SearchResult[]> {\n  const page: Page = await browser.newPage();\n\n  try {\n    const searchURL = buildBaiduSearchURL(query);\n    await page.goto(searchURL, { waitUntil: 'networkidle' });\n\n    const isCaptcha = await handleCaptcha(page);\n    if (isCaptcha) {\n      console.error('Captcha detected during Baidu search.');\n      throw new Error('Captcha encountered');\n    }\n\n    const results = await parseBaiduSearchResults(page);\n    return results;\n  } catch (error) {\n    console.error(`Error during Baidu search: ${(error as Error).message}`);\n    throw error;\n  } finally {\n    await page.close();\n  }\n}\n","/**\n * @file yandex.ts\n * @description Performs Yandex searches using Playwright with rate limiting.\n */\n\nimport { BrowserContext, Page } from 'playwright';\n\n/**\n * Represents a search query.\n */\nexport interface Query {\n  text: string;\n  site?: string;\n  filetype?: string;\n  dateInterval?: string;\n  langCode?: string;\n  limit?: number;\n}\n\n/**\n * Represents a search result.\n */\nexport interface SearchResult {\n  rank: number;\n  url: string;\n  title: string;\n  description: string;\n}\n\n/**\n * Builds a Yandex search URL based on the provided query.\n * @param {Query} query - The search query parameters.\n * @param {number} page - The page number for pagination.\n * @returns {string} - The constructed Yandex search URL.\n */\nfunction buildYandexSearchURL(query: Query, page: number = 0): string {\n  const baseURL = 'https://www.yandex.com/search/';\n  const params = new URLSearchParams();\n\n  if (query.text || query.site || query.filetype) {\n    let searchText = query.text;\n    if (query.site) searchText += ` site:${query.site}`;\n    if (query.filetype) searchText += ` mime:${query.filetype}`;\n    if (query.dateInterval) searchText += ` date:${query.dateInterval}`;\n    if (query.langCode) searchText += ` lang:${query.langCode}`;\n    params.append('text', searchText);\n    params.append('p', page.toString());\n  }\n\n  if (!params.get('text')) {\n    throw new Error('Empty query built');\n  }\n\n  const url = new URL(baseURL);\n  url.search = params.toString();\n  return url.toString();\n}\n\n/**\n * Parses search results from the Yandex results page.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<SearchResult[]>} - The parsed search results.\n */\nasync function parseYandexSearchResults(page: Page): Promise<SearchResult[]> {\n  const results: SearchResult[] = [];\n  const resultElements = await page.$$('li.serp-item');\n\n  for (let i = 0; i < resultElements.length; i++) {\n    const element = resultElements[i];\n    try {\n      const title = await element.$eval('h2', el => el.textContent?.trim() || 'No title');\n      const url = await element.$eval('a', el => el.getAttribute('href') || 'No URL');\n      const description = await element.$eval('span.OrganicTextContentSpan', el => el.textContent?.trim() || 'No description');\n\n      if (url && url !== '#') {\n        results.push({\n          rank: i + 1,\n          url,\n          title,\n          description,\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to parse a search result: ${(error as Error).message}`);\n      continue;\n    }\n  }\n\n  console.info(`Parsed ${results.length} search results.`);\n  return results;\n}\n\n/**\n * Detects and handles Yandex captchas.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<boolean>} - Whether a captcha was detected.\n */\nasync function handleCaptcha(page: Page): Promise<boolean> {\n  try {\n    const captchaForm = await page.$('form#checkbox-captcha-form');\n    if (captchaForm) {\n      console.error('Captcha detected on Yandex search page.');\n      // Implement captcha solving logic or notify the user\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.warn('Error while checking for captcha.');\n    return false;\n  }\n}\n\n/**\n * Accepts cookie consent if prompted.\n * @param {Page} page - The Playwright page instance.\n * @returns {Promise<void>}\n */\nasync function acceptCookieConsent(page: Page): Promise<void> {\n  try {\n    const consentButton = await page.$('button#consent-accept');\n    if (consentButton) {\n      await consentButton.click();\n      console.info('Accepted Yandex cookie consent.');\n    }\n  } catch (error) {\n    console.warn('No cookie consent dialog found.');\n  }\n}\n\n/**\n * Performs a Yandex search with rate limiting.\n * @param {Browser} browser - The Playwright browser instance.\n * @param {Query} query - The search query parameters.\n * @returns {Promise<SearchResult[]>} - The search results.\n */\nexport async function performYandexSearch(\n  browser: BrowserContext,\n  query: Query\n): Promise<SearchResult[]> {\n  const page: Page = await browser.newPage();\n\n  try {\n    const searchURL = buildYandexSearchURL(query);\n    await page.goto(searchURL, { waitUntil: 'networkidle' });\n\n    await acceptCookieConsent(page);\n\n    const isCaptcha = await handleCaptcha(page);\n    if (isCaptcha) {\n      console.error('Captcha detected during Yandex search.');\n      throw new Error('Captcha encountered');\n    }\n\n    const results = await parseYandexSearchResults(page);\n    return results;\n  } catch (error) {\n    console.error(`Error during Yandex search: ${(error as Error).message}`);\n    throw error;\n  } finally {\n    await page.close();\n  }\n}\n","import {  BrowserContext } from 'playwright';\nimport { performGoogleSearch, SearchResult } from '../providers/google';\nimport { performBaiduSearch } from '../providers/baidu';\nimport { performYandexSearch } from '../providers/yandex';\n\n/**\n * Enum for supported search providers.\n */\nexport enum SearchProvider {\n    Google = 'google',\n    Baidu = 'baidu',\n    Yandex = 'yandex',\n}\n\n/**\n * Enum for search types.\n */\nexport enum SearchType {\n    Web = 'web',\n    Image = 'image',\n}\n\n/**\n * Interface representing a search query.\n */\ninterface SearchQuery {\n    provider: SearchProvider;\n    type: SearchType;\n    query: string;\n}\n\n/**\n * Service to perform searches across different providers.\n */\nexport class SearchService {\n    private browser: BrowserContext;\n\n    constructor(browser: BrowserContext) {\n        this.browser = browser;\n    }\n\n    /**\n     * Executes a search based on the provided query parameters.\n     * @param {SearchQuery} searchQuery - The search query parameters.\n     * @returns {Promise<SearchResult[]>} - The search results.\n     */\n    async executeSearch(searchQuery: SearchQuery): Promise<SearchResult[]> {\n        const { provider, type, query } = searchQuery;\n        const searchType = type === SearchType.Web ? 'Web' : 'Image';\n        console.time(`${provider} ${searchType} Search`);\n\n        try {\n            switch (provider) {\n                case SearchProvider.Google:\n                    return await performGoogleSearch(this.browser, query);\n                case SearchProvider.Baidu:\n                    return await performBaiduSearch(this.browser, { text: query });\n                case SearchProvider.Yandex:\n                    return await performYandexSearch(this.browser, { text: query });\n                default:\n                    throw new Error(`Unsupported search provider: ${provider}`);\n            }\n        } finally {\n            console.timeEnd(`${provider} ${searchType} Search`);\n        }\n    }\n} ","import { OpenAPIHono, createRoute, z } from '@hono/zod-openapi';\nimport { SearchService, SearchProvider, SearchType } from '../services/searchService';\nimport { BrowserContext } from 'playwright';\n\n  const baiduRouter = new OpenAPIHono();\n\n  // Define schemas for query parameters and responses\n  const baiduSearchSchema = z.object({\n    query: z.string().min(1).openapi({\n      example: 'Baidu Search',\n    }),\n  });\n\n  const baiduSearchResponseSchema = z.array(z.object({\n    rank: z.number().openapi({\n      example: 1,\n    }),\n    url: z.string().url().openapi({\n      example: 'https://www.example.com',\n    }),\n    title: z.string().openapi({\n      example: 'Example Title',\n    }),\n    description: z.string().openapi({\n      example: 'Example description of the search result.',\n    }),\n  }));\n\n  const baiduImageSearchResponseSchema = z.array(z.object({\n    rank: z.number().openapi({\n      example: 1,\n    }),\n    url: z.string().url().openapi({\n      example: 'https://www.example.com',\n    }),\n    title: z.string().openapi({\n      example: 'Example Title',\n    }),\n    description: z.string().openapi({\n      example: 'Example description of the search result.',\n    }),\n    imageURL: z.string().url().openapi({\n      example: 'https://www.example.com/image.jpg',\n    }),\n  }));\n\n  const baidu = (getBrowser: () => Promise<BrowserContext>) => {\n    // Baidu Web Search Endpoint\n    baiduRouter.openapi(\n    createRoute({\n      method: 'get',\n      path: '/search',\n      request: {\n        query: baiduSearchSchema,\n      },\n      responses: {\n        200: {\n          description: 'A list of search results',\n          content: {\n            'application/json': {\n              schema: baiduSearchResponseSchema,\n            },\n          },\n        },\n      },\n    }),\n    async (c: any) => {\n      console.time('Baidu Web Search');\n      const { query } = c.req.valid()\n      const browser = await getBrowser();\n      const searchService = new SearchService(browser);\n      const results = await searchService.executeSearch({\n        provider: SearchProvider.Baidu,\n        type: SearchType.Web,\n        query: query.query,\n      });\n      console.timeEnd('Baidu Web Search');\n      return c.json(results);\n      }\n    );\n\n    // Baidu Image Search Endpoint\n  baiduRouter.openapi(\n    createRoute({\n      method: 'get',\n      path: '/image-search',\n      request: {\n        query: baiduSearchSchema,\n      },\n      responses: {\n        200: {\n          description: 'A list of image search results',\n          content: {\n            'application/json': {\n              schema: baiduImageSearchResponseSchema,\n            },\n          },\n        },\n      },\n    }),\n    async (c: any) => {\n      console.time('Baidu Image Search');\n      const { query } = c.req.valid()\n      const browser = await getBrowser();\n      const searchService = new SearchService(browser);\n      const results = await searchService.executeSearch({\n        provider: SearchProvider.Baidu,\n        type: SearchType.Image,\n        query: query.query,\n      });\n      console.timeEnd('Baidu Image Search');\n      return c.json(results);\n    }\n  );\n\n    return baiduRouter;\n}\n\nexport default baidu; ","import { OpenAPIHono, createRoute, z } from '@hono/zod-openapi';\nimport { SearchService, SearchProvider, SearchType } from '../services/searchService';\nimport { BrowserContext } from 'playwright';\n\nconst yandexRouter = new OpenAPIHono();\n\n// Define schemas for query parameters and responses\nconst yandexSearchSchema = z.object({\n  query: z.string().min(1).openapi({\n    example: 'Yandex Search',\n  }),\n});\n\nconst yandexSearchResponseSchema = z.array(z.object({\n  rank: z.number().openapi({\n    example: 1,\n  }),\n  url: z.string().url().openapi({\n    example: 'https://www.example.com',\n  }),\n  title: z.string().openapi({\n    example: 'Example Title',\n  }),\n  description: z.string().openapi({\n    example: 'Example description of the search result.',\n  }),\n}));\n\nconst yandexImageSearchResponseSchema = z.array(z.object({\n    rank: z.number().openapi({\n      example: 1,\n    }),\n    url: z.string().url().openapi({\n      example: 'https://www.example.com',\n    }),\n    title: z.string().openapi({\n      example: 'Example Title',\n    }),\n    description: z.string().openapi({\n      example: 'Example description of the search result.',\n    }),\n  imageURL: z.string().url().openapi({\n    example: 'https://www.example.com/image.jpg',\n  }),\n}));\nconst yandex = (getBrowser: () => Promise<BrowserContext>) => {\n// Yandex Web Search Endpoint\nyandexRouter.openapi(\n  createRoute({\n    method: 'get',\n    path: '/search',\n    request: {\n      query: yandexSearchSchema,\n    },\n    responses: {\n      200: {\n        description: 'A list of search results',\n        content: {\n          'application/json': {\n            schema: yandexSearchResponseSchema,\n          },\n        },\n      },\n    },\n  }),\n  async (c: any) => {\n    console.time('Yandex Web Search');\n    const { query } = c.req.valid()\n    const browser = await getBrowser();\n    const searchService = new SearchService(browser);\n    const results = await searchService.executeSearch({\n      provider: SearchProvider.Yandex,\n      type: SearchType.Web,\n      query: query.query,\n    });\n    console.timeEnd('Yandex Web Search');\n    return c.json(results);\n  }\n);\n\n// Yandex Image Search Endpoint\nyandexRouter.openapi(\n  createRoute({\n    method: 'get',\n    path: '/image-search',\n    request: {\n      query: yandexSearchSchema,\n    },\n    responses: {\n      200: {\n        description: 'A list of image search results',\n        content: {\n          'application/json': {\n            schema: yandexImageSearchResponseSchema,\n          },\n        },\n      },\n    },\n  }),\n  async (c: any) => {\n    console.time('Yandex Image Search');\n    const { query } = c.req.valid();\n    const browser = await getBrowser();\n    const searchService = new SearchService(browser);\n    const results = await searchService.executeSearch({\n      provider: SearchProvider.Yandex,\n      type: SearchType.Image,\n      query: query.query,\n    });\n    console.timeEnd('Yandex Image Search');\n    return c.json(results);\n  }\n    );\n\n    return yandexRouter;\n}\n\nexport default yandex; ","import { OpenAPIHono, createRoute, z } from '@hono/zod-openapi';\nimport { SearchService, SearchProvider, SearchType } from '../services/searchService';\nimport { Browser, BrowserContext } from 'playwright';\nimport { Context } from 'hono';\n\nconst googleRouter = new OpenAPIHono();\n\n// Define schemas for query parameters and responses\nconst googleSearchSchema = z.object({\n    query: z.string().min(1).openapi({\n        example: 'OpenAI',\n    }),\n});\n\nconst googleSearchResponseSchema = z.array(z.object({\n    rank: z.number().openapi({\n        example: 1,\n    }),\n    url: z.string().url().openapi({\n        example: 'https://www.example.com',\n    }),\n    title: z.string().openapi({\n        example: 'Example Title',\n    }),\n    description: z.string().openapi({\n        example: 'Example description of the search result.',\n    }),\n}));\nconst googleSearchResponseSchemaWithImage = z.array(z.object({\n    rank: z.number().openapi({\n        example: 1,\n    }),\n    url: z.string().url().openapi({\n        example: 'https://www.example.com',\n    }),\n    title: z.string().openapi({\n        example: 'Example Title',\n    }),\n    description: z.string().openapi({\n        example: 'Example description of the search result.',\n    }),\n    imageURL: z.string().url().openapi({\n        example: 'https://www.example.com/image.jpg',\n    }),\n}));\n\n// Google Web Search Endpoint\nconst google = (getBrowser: () => Promise<BrowserContext>) => {\n    googleRouter.openapi(\n        createRoute({\n            method: 'get',\n            path: '/search',\n            request: {\n                query: googleSearchSchema,\n            },\n            responses: {\n                200: {\n                    description: 'A list of search results',\n                    content: {\n                        'application/json': {\n                            schema: googleSearchResponseSchema,\n                        },\n                    },\n                },\n            },\n        }),\n        async (c: Context) => {\n            console.time('Google Web Search');\n            const query = c.req.query('query');\n            const browser = await getBrowser();\n            const searchService = new SearchService(browser);\n            const results = await searchService.executeSearch({\n                provider: SearchProvider.Google,\n                type: SearchType.Web,\n                query: query!,\n            });\n            console.timeEnd('Google Web Search');\n            return c.json(results);\n        }\n    );\n\n    // Google Image Search Endpoint\n    googleRouter.openapi(\n        createRoute({\n            method: 'get',\n            path: '/image-search',\n            request: {\n                query: googleSearchSchema,\n            },\n            responses: {\n                200: {\n                    description: 'A list of image search results',\n                    content: {\n                        'application/json': {\n                            schema: googleSearchResponseSchemaWithImage,\n                        },\n                    },\n                },\n            },\n        }),\n        async (c: any) => {\n            console.time('Google Image Search');\n            const { query } = c.req.valid()\n            const browser = await getBrowser();\n            const searchService = new SearchService(browser);\n            const results = await searchService.executeSearch({\n                provider: SearchProvider.Google,\n                type: SearchType.Image,\n                query: query.query,\n            });\n            console.timeEnd('Google Image Search');\n            return c.json(results);\n        }\n    );\n\n    return googleRouter;\n}\n\nexport default google; ","import { OpenAPIHono, createRoute, z } from '@hono/zod-openapi';\nimport { BrowserContext } from 'playwright';\nimport logger from '../utils/logger';\n\nconst screenshotRouter = new OpenAPIHono();\n\n/**\n * Takes a full-page screenshot of the specified URL.\n * @param context - The browser context to use.\n * @param url - The URL of the page to capture.\n * @returns A buffer containing the screenshot image.\n */\nasync function takeFullPageScreenshot(context: BrowserContext, url: string): Promise<Buffer> {\n    const page = await context.newPage();\n    await page.goto(url, { waitUntil: 'networkidle' });\n    const screenshot = await page.screenshot({ fullPage: true });\n    await page.close();\n    return screenshot;\n}\n\n// Define schema for query parameters\nconst screenshotQuerySchema = z.object({\n    url: z.string().url().openapi({\n        example: 'https://www.example.com',\n    }),\n});\nconst screenshot = (getBrowser: () => Promise<BrowserContext>) => {\n// Screenshot Endpoint\nscreenshotRouter.openapi(\n    createRoute({\n        method: 'get',\n        path: '/screenshot',\n        request: {\n            query: screenshotQuerySchema,\n        },\n        responses: {\n            200: {\n                description: 'A full-page screenshot of the specified URL',\n                content: {\n                    'image/png': {\n                        schema: z.any(),\n                    },\n                },\n            },\n            400: {\n                description: 'Bad Request - URL query parameter is required',\n                content: {\n                    'text/plain': {\n                        schema: z.string(),\n                    },\n                },\n            },\n            500: {\n                description: 'Internal Server Error - Failed to take screenshot',\n                content: {\n                    'text/plain': {\n                        schema: z.string(),\n                    },\n                },\n            },\n        },\n    }),\n    async (c: any) => {\n        const url = c.req.query('url');\n        if (!url) {\n            return c.text('URL query parameter is required', 400);\n        }\n        try {\n            const browser = await getBrowser();\n            const screenshot = await takeFullPageScreenshot(browser, url);\n            return c.body(screenshot, 200, { 'Content-Type': 'image/png' });\n        } catch (error) {\n            logger.error(`Failed to take screenshot: ${(error as Error).message}`);\n            return c.text('Failed to take screenshot', 500);\n        }\n    }\n);\n\nreturn screenshotRouter;\n}\n\n\nexport default screenshot;","/**\n * @file index.ts\n * @description Initializes a Playwright instance using Firefox to perform Google searches and serves an API with Swagger documentation.\n */\n\nimport { firefox, Browser, BrowserContext } from 'playwright';\nimport { performGoogleSearch } from './providers/google';\nimport logger from './utils/logger';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport { serve } from '@hono/node-server';\nimport { OpenAPIHono } from '@hono/zod-openapi';\nimport { swaggerUI } from '@hono/swagger-ui';\nimport baidu from './routers/baiduRouter';\nimport yandex from './routers/yandexRouter';\nimport google from './routers/googleRouter';\nimport screenshot from './routers/screenshotRouter';\n\nlet _browser: Browser;\nlet browser: BrowserContext;\ndotenv.config();\n\ninterface SearchResult {\n  rank: number;\n  url: string;\n  title: string;\n  description: string;\n}\n\nasync function initializeBrowser(): Promise<BrowserContext> {\n    if (!browser) {\n       browser = await firefox.launchPersistentContext(path.resolve(__dirname, '../', 'user-data-dir'), {\n            headless: true,\n            args: [\n                '--no-remote',\n                '--new-instance',\n                '--disable-gpu',\n                '--disable-extensions-except='+path.resolve(__dirname, '../', 'ublock.xpi'),\n                '--load-extension='+path.resolve(__dirname, '../', 'ublock.xpi'),\n            ],\n        });\n    }\n    return browser;\n}\n// Initialize the browser at the start of the script\n(async () => {\n  try {\n    browser = await initializeBrowser();\n    logger.info('Browser initialized successfully.');\n  } catch (error) {\n    logger.error(`Failed to initialize browser: ${(error as Error).message}`);\n    process.exit(1); // Exit the process if the browser fails to initialize\n  }\n})();\n\nconst getBrowser = async () => {\n  if (!browser) {\n    browser = await initializeBrowser();\n  }\n  return browser;\n}\n\nconst app = new OpenAPIHono<{ Bindings: any }>();\n\n// Pass the initialized browser to the routers\napp.route('/google', google(getBrowser));\napp.route('/baidu', baidu(getBrowser));\napp.route('/yandex', yandex(getBrowser));\napp.route('/screenshot', screenshot(getBrowser));\n\napp.get('/', (c) => c.text('Hello, Hono!'));\n\napp.get('/ui', swaggerUI({ url: '/doc' }));\n\napp.doc('/doc.json', {\n    openapi: '3.0.0',\n    info: {\n        title: 'Search API',\n        version: '1.0.0',\n        description: 'API for performing web and image searches across multiple providers',\n    },\n    servers: [\n        {\n            url: 'http://localhost:3000',\n        },\n    ],\n});\n\napp.get('/doc', async (c) => {\n    const content = await fetch('http://localhost:3000/doc.json');\n    const data = await content.json();\n    console.log(data);\n    return c.html(`\n        <!doctype html>\n<html>\n  <head>\n    <title>Scalar API Reference</title>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <script\n      id=\"api-reference\"\n      data-url=\"/doc.json\"></script>\n\n//     <!-- Optional: You can set a full configuration object like this: -->\n//         <script\n//   id=\"api-reference\"\n//   type=\"application/json\">\n//   ${JSON.stringify(data, null, 2)}\n// </script>\n<script src=\"https://cdn.jsdelivr.net/npm/@scalar/api-reference\"></script>\n  </body>\n</html>\n        \n        `);\n});\n\nserve(app, (info) => {\n    console.log(`Listening on http://localhost:${info.port}`);\n}); "],"mappings":"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","names":["handleCaptcha","handleCaptcha","acceptCookieConsent","OpenAPIHono","createRoute","z","OpenAPIHono","createRoute","z","OpenAPIHono","createRoute","z","screenshot","OpenAPIHono"]}